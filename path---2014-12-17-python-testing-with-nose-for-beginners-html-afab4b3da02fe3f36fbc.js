webpackJsonp([2708132243695],{355:function(e,t){e.exports={data:{markdownRemark:{html:'<p>I\'ve been meaning to write a simple primer for unit testing in python ever since\nI realized how invaluable writing tests are. You must be thinking that everyone\nknows to test they\'re code. I did too, but I didn\'t do it. It seemed hard and I\nwas lazy. Fortunately, its really easy to get started.</p>\n<p>This blog post is about how to get started with <a href="https://nose.readthedocs.org/en/latest/"><code>nose</code></a> to write unit\ntests for your python code with as little friction as possible.</p>\n<!--more-->\n<h1>Motivation</h1>\n<p>If you have no experience writing tests, I fully empathize with you. I\npreviously only wrote tests when it was \'necessary\', which meant I never wrote\nthem. Consequently, during my internships, I found out how little experience I\nhad writing tests and testable code. However, once I was over the initial\nhurdle, it was easy to see the benefits and flexibility that having tests\naffords you.</p>\n<p>I figured as with most things, this is a skill that I could get better at by\ndoing repeatedly. I started writing tests for most of my code, even one-off\n<a href="https://github.com/ymichael/cs4248">class</a> <a href="https://github.com/ymichael/cs3245-hw">assignments</a> and projects that didn\'t really care too\nmuch about them.</p>\n<h1>Installation</h1>\n<p>The setup is really easy. Just <code>pip</code> install <code>nose</code>. (easy_install\nworks too).</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">pip <span class="token function">install</span> nose\n</code></pre>\n      </div>\n<h1><a href="https://nose.readthedocs.org/en/latest/">Nosetests</a></h1>\n<p>The great thing about <a href="https://nose.readthedocs.org/en/latest/"><code>nose</code></a>, is how easy it is to write and run tests.\nInstalling <code>nose</code> adds a <code>nosetests</code> command that you can invoke to run your\ntests inside the folder you\'re currently at.</p>\n<p>By default, <code>nosetests</code> finds:</p>\n<ul>\n<li>files or folders that contain <code>/[Tt]est/</code> in their name, eg. <code>model_test.py</code>,\n<code>modelTest.py</code> etc.</li>\n<li>within these files, functions and classes with <code>/[Tt]est/</code> in their name will\nbe run as tests. eg. <code>test_function_simple</code>, <code>test_function_zero</code> etc.</li>\n</ul>\n<h1>Test files and writing your first test</h1>\n<p>Where you put your tests is a matter of preference, I prefer to have my tests in\nthe same place as my files for ease of locating them and importing the code to\nbe tested.</p>\n<p>If I have <code>/path/to/project/src/model.py</code>, I would have a corresponding\n<code>/path/to/project/src/test_model.py</code>. So all tests for <code>model.py</code> will go into\n<code>test_model.py</code>.</p>\n<p>Inside your test files, you simply import the code you\'re testing and test it.\n<a href="https://github.com/ymichael/cs3245-hw"><em>I\'ll be using examples from one of my class assignments so feel free to refer to it for the full source.</em></a></p>\n<p>Here is an example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-py"><code class="language-py">import model\n\n\ndef test_model_total_count():\n    m = model.Model()\n    assert m.total_count() == 0\n\n    m.incr_gram_count((\'h\',))\n    m.incr_gram_count((\'e\',))\n    m.incr_gram_count((\'l\',))\n    m.incr_gram_count((\'l\',))\n    m.incr_gram_count((\'o\',))\n\n    assert m.total_count() == (5 + 4)\n    assert m.total_count(include_smoothing=False) == 5</code></pre>\n      </div>\n<p>In the above example, I import the <code>model</code> file and test the <code>total_count</code>\nmethod of the <code>Model</code> object before and after incrementing the \'grams\' in the\nmodel.</p>\n<p>Saving this file and running <code>nosetests</code> on the command line will run\n<code>test_model_total_count</code>!</p>\n<h1>Some other things about nose</h1>\n<p>If you\'ve written tests before, or at least heard of them, you\'ll know that the\nexample above is really simple and you probably will need a couple more things\nto get going.</p>\n<h2><code>setup</code> and <code>teardown</code></h2>\n<p>Chances are, you\'re writing a couple of tests in each test file that are highly\nrelated. <code>nose</code> makes it really easy to write <code>setup</code> and <code>teardown</code> functions\nfor your tests:</p>\n<div class="gatsby-highlight">\n      <pre class="language-py"><code class="language-py">def setup():\n    # setup here..\n    pass\n\ndef teardown():\n    # teardown here..\n    pass</code></pre>\n      </div>\n<p>Simply name them as such and the test runner will run the functions before and after\neach test. <em>(There are other acceptable variants, which I\'m leaving out that will be run\nby the test runner)</em>.</p>\n<h2>assert equals</h2>\n<p>In the example above, I used the built-in <code>assert</code> function in python. However,\nwhen the test fails, the error message isn\'t really helpful, it\'ll say that it\nexpected <code>True</code> but got <code>False</code> instead.</p>\n<p><code>nose</code> provides a nice <code>nose.tools._eq_</code> that takes two values and compares them\nusing the <code>==</code> operator. Upon failure, it gives a nice message, something like\n<em>"expected 5 but was given 4"</em>, helping you to indentify and fix the source of the\nbroken test quickly.</p>\n<h2>Other bells and whistles</h2>\n<p>For the sake of making this as simple as possible, I have glossed over\nmany of <code>nose</code>\'s functionalities. You probably will use some of them eventually\nbut they are not necessary to start writing simple tests and get into the habit\nof writing testable code. <em>Trust me, it gets easier.</em></p>\n<p>Stuff like:</p>\n<ul>\n<li>Using a test class instead of test functions</li>\n<li>Specific setup and teardown functions for specific test functions</li>\n<li>Running only some tests (and not all of them)</li>\n<li>Testing that an exception was raised in a test</li>\n<li>...</li>\n</ul>\n<h1>Closing thoughts</h1>\n<p>Hopefully you feel like writing unit tests in python is really simple after\nreading this. If you find yourself in the need for mocking and stubing objects\nin your tests, I highly recommend the <a href="https://code.google.com/p/mockito-python/"><code>mockito-python</code></a> library\nthat is model after the java library of the same name. It integrates seamlessly\nwith <code>nose</code> and is really intuitive to use.</p>\n<p>Happy testing!</p>',frontmatter:{title:"Python Testing with nose for beginners",date:"17 December, 2014"},fields:{slug:"/2014/12/17/python-testing-with-nose-for-beginners.html"}}},pathContext:{slug:"/2014/12/17/python-testing-with-nose-for-beginners.html"}}}});
//# sourceMappingURL=path---2014-12-17-python-testing-with-nose-for-beginners-html-afab4b3da02fe3f36fbc.js.map