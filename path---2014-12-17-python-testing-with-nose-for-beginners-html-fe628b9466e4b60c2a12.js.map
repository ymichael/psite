{"version":3,"sources":["webpack:///path---2014-12-17-python-testing-with-nose-for-beginners-html-fe628b9466e4b60c2a12.js","webpack:///./.cache/json/2014-12-17-python-testing-with-nose-for-beginners-html.json"],"names":["webpackJsonp","362","module","exports","data","markdownRemark","html","frontmatter","title","date","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,+tUAAAC,aAA2+UC,MAAA,yCAAAC,KAAA,qBAA4EC,QAAWC,KAAA,6DAAmEC,aAAgBD,KAAA","file":"path---2014-12-17-python-testing-with-nose-for-beginners-html-fe628b9466e4b60c2a12.js","sourcesContent":["webpackJsonp([2708132243695],{\n\n/***/ 362:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>I've been meaning to write a simple primer for unit testing in python ever since\\nI realized how invaluable writing tests are. You must be thinking that everyone\\nknows to test they're code. I did too, but I didn't do it. It seemed hard and I\\nwas lazy. Fortunately, its really easy to get started.</p>\\n<p>This blog post is about how to get started with <a href=\\\"https://nose.readthedocs.org/en/latest/\\\"><code class=\\\"language-text\\\">nose</code></a> to write unit\\ntests for your python code with as little friction as possible.</p>\\n<!--more-->\\n<h1>Motivation</h1>\\n<p>If you have no experience writing tests, I fully empathize with you. I\\npreviously only wrote tests when it was 'necessary', which meant I never wrote\\nthem. Consequently, during my internships, I found out how little experience I\\nhad writing tests and testable code. However, once I was over the initial\\nhurdle, it was easy to see the benefits and flexibility that having tests\\naffords you.</p>\\n<p>I figured as with most things, this is a skill that I could get better at by\\ndoing repeatedly. I started writing tests for most of my code, even one-off\\n<a href=\\\"https://github.com/ymichael/cs4248\\\">class</a> <a href=\\\"https://github.com/ymichael/cs3245-hw\\\">assignments</a> and projects that didn't really care too\\nmuch about them.</p>\\n<h1>Installation</h1>\\n<p>The setup is really easy. Just <code class=\\\"language-text\\\">pip</code> install <code class=\\\"language-text\\\">nose</code>. (easy_install\\nworks too).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">pip <span class=\\\"token function\\\">install</span> nose</code></pre>\\n      </div>\\n<h1><a href=\\\"https://nose.readthedocs.org/en/latest/\\\">Nosetests</a></h1>\\n<p>The great thing about <a href=\\\"https://nose.readthedocs.org/en/latest/\\\"><code class=\\\"language-text\\\">nose</code></a>, is how easy it is to write and run tests.\\nInstalling <code class=\\\"language-text\\\">nose</code> adds a <code class=\\\"language-text\\\">nosetests</code> command that you can invoke to run your\\ntests inside the folder you're currently at.</p>\\n<p>By default, <code class=\\\"language-text\\\">nosetests</code> finds:</p>\\n<ul>\\n<li>files or folders that contain <code class=\\\"language-text\\\">/[Tt]est/</code> in their name, eg. <code class=\\\"language-text\\\">model_test.py</code>,\\n<code class=\\\"language-text\\\">modelTest.py</code> etc.</li>\\n<li>within these files, functions and classes with <code class=\\\"language-text\\\">/[Tt]est/</code> in their name will\\nbe run as tests. eg. <code class=\\\"language-text\\\">test_function_simple</code>, <code class=\\\"language-text\\\">test_function_zero</code> etc.</li>\\n</ul>\\n<h1>Test files and writing your first test</h1>\\n<p>Where you put your tests is a matter of preference, I prefer to have my tests in\\nthe same place as my files for ease of locating them and importing the code to\\nbe tested.</p>\\n<p>If I have <code class=\\\"language-text\\\">/path/to/project/src/model.py</code>, I would have a corresponding\\n<code class=\\\"language-text\\\">/path/to/project/src/test_model.py</code>. So all tests for <code class=\\\"language-text\\\">model.py</code> will go into\\n<code class=\\\"language-text\\\">test_model.py</code>.</p>\\n<p>Inside your test files, you simply import the code you're testing and test it.\\n<a href=\\\"https://github.com/ymichael/cs3245-hw\\\"><em>I'll be using examples from one of my class assignments so feel free to refer to it for the full source.</em></a></p>\\n<p>Here is an example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-py\\\"><code class=\\\"language-py\\\"><span class=\\\"token keyword\\\">import</span> model\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">test_model_total_count</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    m <span class=\\\"token operator\\\">=</span> model<span class=\\\"token punctuation\\\">.</span>Model<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">assert</span> m<span class=\\\"token punctuation\\\">.</span>total_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span>\\n\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'e'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'o'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">assert</span> m<span class=\\\"token punctuation\\\">.</span>total_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">assert</span> m<span class=\\\"token punctuation\\\">.</span>total_count<span class=\\\"token punctuation\\\">(</span>include_smoothing<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">False</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">5</span></code></pre>\\n      </div>\\n<p>In the above example, I import the <code class=\\\"language-text\\\">model</code> file and test the <code class=\\\"language-text\\\">total_count</code>\\nmethod of the <code class=\\\"language-text\\\">Model</code> object before and after incrementing the 'grams' in the\\nmodel.</p>\\n<p>Saving this file and running <code class=\\\"language-text\\\">nosetests</code> on the command line will run\\n<code class=\\\"language-text\\\">test_model_total_count</code>!</p>\\n<h1>Some other things about nose</h1>\\n<p>If you've written tests before, or at least heard of them, you'll know that the\\nexample above is really simple and you probably will need a couple more things\\nto get going.</p>\\n<h2><code class=\\\"language-text\\\">setup</code> and <code class=\\\"language-text\\\">teardown</code></h2>\\n<p>Chances are, you're writing a couple of tests in each test file that are highly\\nrelated. <code class=\\\"language-text\\\">nose</code> makes it really easy to write <code class=\\\"language-text\\\">setup</code> and <code class=\\\"language-text\\\">teardown</code> functions\\nfor your tests:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-py\\\"><code class=\\\"language-py\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">setup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># setup here..</span>\\n    <span class=\\\"token keyword\\\">pass</span>\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">teardown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># teardown here..</span>\\n    <span class=\\\"token keyword\\\">pass</span></code></pre>\\n      </div>\\n<p>Simply name them as such and the test runner will run the functions before and after\\neach test. <em>(There are other acceptable variants, which I'm leaving out that will be run\\nby the test runner)</em>.</p>\\n<h2>assert equals</h2>\\n<p>In the example above, I used the built-in <code class=\\\"language-text\\\">assert</code> function in python. However,\\nwhen the test fails, the error message isn't really helpful, it'll say that it\\nexpected <code class=\\\"language-text\\\">True</code> but got <code class=\\\"language-text\\\">False</code> instead.</p>\\n<p><code class=\\\"language-text\\\">nose</code> provides a nice <code class=\\\"language-text\\\">nose.tools._eq_</code> that takes two values and compares them\\nusing the <code class=\\\"language-text\\\">==</code> operator. Upon failure, it gives a nice message, something like\\n<em>\\\"expected 5 but was given 4\\\"</em>, helping you to indentify and fix the source of the\\nbroken test quickly.</p>\\n<h2>Other bells and whistles</h2>\\n<p>For the sake of making this as simple as possible, I have glossed over\\nmany of <code class=\\\"language-text\\\">nose</code>'s functionalities. You probably will use some of them eventually\\nbut they are not necessary to start writing simple tests and get into the habit\\nof writing testable code. <em>Trust me, it gets easier.</em></p>\\n<p>Stuff like:</p>\\n<ul>\\n<li>Using a test class instead of test functions</li>\\n<li>Specific setup and teardown functions for specific test functions</li>\\n<li>Running only some tests (and not all of them)</li>\\n<li>Testing that an exception was raised in a test</li>\\n<li>...</li>\\n</ul>\\n<h1>Closing thoughts</h1>\\n<p>Hopefully you feel like writing unit tests in python is really simple after\\nreading this. If you find yourself in the need for mocking and stubing objects\\nin your tests, I highly recommend the <a href=\\\"https://code.google.com/p/mockito-python/\\\"><code class=\\\"language-text\\\">mockito-python</code></a> library\\nthat is model after the java library of the same name. It integrates seamlessly\\nwith <code class=\\\"language-text\\\">nose</code> and is really intuitive to use.</p>\\n<p>Happy testing!</p>\",\"frontmatter\":{\"title\":\"Python Testing with nose for beginners\",\"date\":\"17 December, 2014\"},\"fields\":{\"slug\":\"/2014/12/17/python-testing-with-nose-for-beginners.html\"}}},\"pathContext\":{\"slug\":\"/2014/12/17/python-testing-with-nose-for-beginners.html\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2014-12-17-python-testing-with-nose-for-beginners-html-fe628b9466e4b60c2a12.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>I've been meaning to write a simple primer for unit testing in python ever since\\nI realized how invaluable writing tests are. You must be thinking that everyone\\nknows to test they're code. I did too, but I didn't do it. It seemed hard and I\\nwas lazy. Fortunately, its really easy to get started.</p>\\n<p>This blog post is about how to get started with <a href=\\\"https://nose.readthedocs.org/en/latest/\\\"><code class=\\\"language-text\\\">nose</code></a> to write unit\\ntests for your python code with as little friction as possible.</p>\\n<!--more-->\\n<h1>Motivation</h1>\\n<p>If you have no experience writing tests, I fully empathize with you. I\\npreviously only wrote tests when it was 'necessary', which meant I never wrote\\nthem. Consequently, during my internships, I found out how little experience I\\nhad writing tests and testable code. However, once I was over the initial\\nhurdle, it was easy to see the benefits and flexibility that having tests\\naffords you.</p>\\n<p>I figured as with most things, this is a skill that I could get better at by\\ndoing repeatedly. I started writing tests for most of my code, even one-off\\n<a href=\\\"https://github.com/ymichael/cs4248\\\">class</a> <a href=\\\"https://github.com/ymichael/cs3245-hw\\\">assignments</a> and projects that didn't really care too\\nmuch about them.</p>\\n<h1>Installation</h1>\\n<p>The setup is really easy. Just <code class=\\\"language-text\\\">pip</code> install <code class=\\\"language-text\\\">nose</code>. (easy_install\\nworks too).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">pip <span class=\\\"token function\\\">install</span> nose</code></pre>\\n      </div>\\n<h1><a href=\\\"https://nose.readthedocs.org/en/latest/\\\">Nosetests</a></h1>\\n<p>The great thing about <a href=\\\"https://nose.readthedocs.org/en/latest/\\\"><code class=\\\"language-text\\\">nose</code></a>, is how easy it is to write and run tests.\\nInstalling <code class=\\\"language-text\\\">nose</code> adds a <code class=\\\"language-text\\\">nosetests</code> command that you can invoke to run your\\ntests inside the folder you're currently at.</p>\\n<p>By default, <code class=\\\"language-text\\\">nosetests</code> finds:</p>\\n<ul>\\n<li>files or folders that contain <code class=\\\"language-text\\\">/[Tt]est/</code> in their name, eg. <code class=\\\"language-text\\\">model_test.py</code>,\\n<code class=\\\"language-text\\\">modelTest.py</code> etc.</li>\\n<li>within these files, functions and classes with <code class=\\\"language-text\\\">/[Tt]est/</code> in their name will\\nbe run as tests. eg. <code class=\\\"language-text\\\">test_function_simple</code>, <code class=\\\"language-text\\\">test_function_zero</code> etc.</li>\\n</ul>\\n<h1>Test files and writing your first test</h1>\\n<p>Where you put your tests is a matter of preference, I prefer to have my tests in\\nthe same place as my files for ease of locating them and importing the code to\\nbe tested.</p>\\n<p>If I have <code class=\\\"language-text\\\">/path/to/project/src/model.py</code>, I would have a corresponding\\n<code class=\\\"language-text\\\">/path/to/project/src/test_model.py</code>. So all tests for <code class=\\\"language-text\\\">model.py</code> will go into\\n<code class=\\\"language-text\\\">test_model.py</code>.</p>\\n<p>Inside your test files, you simply import the code you're testing and test it.\\n<a href=\\\"https://github.com/ymichael/cs3245-hw\\\"><em>I'll be using examples from one of my class assignments so feel free to refer to it for the full source.</em></a></p>\\n<p>Here is an example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-py\\\"><code class=\\\"language-py\\\"><span class=\\\"token keyword\\\">import</span> model\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">test_model_total_count</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    m <span class=\\\"token operator\\\">=</span> model<span class=\\\"token punctuation\\\">.</span>Model<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">assert</span> m<span class=\\\"token punctuation\\\">.</span>total_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span>\\n\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'e'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    m<span class=\\\"token punctuation\\\">.</span>incr_gram_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'o'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">assert</span> m<span class=\\\"token punctuation\\\">.</span>total_count<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">assert</span> m<span class=\\\"token punctuation\\\">.</span>total_count<span class=\\\"token punctuation\\\">(</span>include_smoothing<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">False</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">5</span></code></pre>\\n      </div>\\n<p>In the above example, I import the <code class=\\\"language-text\\\">model</code> file and test the <code class=\\\"language-text\\\">total_count</code>\\nmethod of the <code class=\\\"language-text\\\">Model</code> object before and after incrementing the 'grams' in the\\nmodel.</p>\\n<p>Saving this file and running <code class=\\\"language-text\\\">nosetests</code> on the command line will run\\n<code class=\\\"language-text\\\">test_model_total_count</code>!</p>\\n<h1>Some other things about nose</h1>\\n<p>If you've written tests before, or at least heard of them, you'll know that the\\nexample above is really simple and you probably will need a couple more things\\nto get going.</p>\\n<h2><code class=\\\"language-text\\\">setup</code> and <code class=\\\"language-text\\\">teardown</code></h2>\\n<p>Chances are, you're writing a couple of tests in each test file that are highly\\nrelated. <code class=\\\"language-text\\\">nose</code> makes it really easy to write <code class=\\\"language-text\\\">setup</code> and <code class=\\\"language-text\\\">teardown</code> functions\\nfor your tests:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-py\\\"><code class=\\\"language-py\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">setup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># setup here..</span>\\n    <span class=\\\"token keyword\\\">pass</span>\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">teardown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># teardown here..</span>\\n    <span class=\\\"token keyword\\\">pass</span></code></pre>\\n      </div>\\n<p>Simply name them as such and the test runner will run the functions before and after\\neach test. <em>(There are other acceptable variants, which I'm leaving out that will be run\\nby the test runner)</em>.</p>\\n<h2>assert equals</h2>\\n<p>In the example above, I used the built-in <code class=\\\"language-text\\\">assert</code> function in python. However,\\nwhen the test fails, the error message isn't really helpful, it'll say that it\\nexpected <code class=\\\"language-text\\\">True</code> but got <code class=\\\"language-text\\\">False</code> instead.</p>\\n<p><code class=\\\"language-text\\\">nose</code> provides a nice <code class=\\\"language-text\\\">nose.tools._eq_</code> that takes two values and compares them\\nusing the <code class=\\\"language-text\\\">==</code> operator. Upon failure, it gives a nice message, something like\\n<em>\\\"expected 5 but was given 4\\\"</em>, helping you to indentify and fix the source of the\\nbroken test quickly.</p>\\n<h2>Other bells and whistles</h2>\\n<p>For the sake of making this as simple as possible, I have glossed over\\nmany of <code class=\\\"language-text\\\">nose</code>'s functionalities. You probably will use some of them eventually\\nbut they are not necessary to start writing simple tests and get into the habit\\nof writing testable code. <em>Trust me, it gets easier.</em></p>\\n<p>Stuff like:</p>\\n<ul>\\n<li>Using a test class instead of test functions</li>\\n<li>Specific setup and teardown functions for specific test functions</li>\\n<li>Running only some tests (and not all of them)</li>\\n<li>Testing that an exception was raised in a test</li>\\n<li>...</li>\\n</ul>\\n<h1>Closing thoughts</h1>\\n<p>Hopefully you feel like writing unit tests in python is really simple after\\nreading this. If you find yourself in the need for mocking and stubing objects\\nin your tests, I highly recommend the <a href=\\\"https://code.google.com/p/mockito-python/\\\"><code class=\\\"language-text\\\">mockito-python</code></a> library\\nthat is model after the java library of the same name. It integrates seamlessly\\nwith <code class=\\\"language-text\\\">nose</code> and is really intuitive to use.</p>\\n<p>Happy testing!</p>\",\"frontmatter\":{\"title\":\"Python Testing with nose for beginners\",\"date\":\"17 December, 2014\"},\"fields\":{\"slug\":\"/2014/12/17/python-testing-with-nose-for-beginners.html\"}}},\"pathContext\":{\"slug\":\"/2014/12/17/python-testing-with-nose-for-beginners.html\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2014-12-17-python-testing-with-nose-for-beginners-html.json\n// module id = 362\n// module chunks = 2708132243695"],"sourceRoot":""}